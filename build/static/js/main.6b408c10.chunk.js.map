{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","class","className","src","concat","alt","CardList","robots","map","user","i","src_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","children","App","this","onRequestRobots","_this$props","searchfield","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","src_SearchBox","src_Scroll","src_CardList","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b408c10.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return ( \r\n        // can only return one element\r\n        <div class=\"card\" className='tc bg-white dib br2 pa3 ma3 ha 32'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'></img>\r\n            <div>\r\n               <h2>{name}</h2> \r\n               <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n        {\r\n        robots.map((user, i) => {\r\n            return (\r\n            <Card \r\n            key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}\r\n            />\r\n            );\r\n        })\r\n        }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <input \r\n        className = 'pa3 ma3 mb4 mt1 ba br2 b--white'\r\n        type='search' \r\n        placeholder='Start searching!'\r\n        onChange = {searchChange}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div class='overflow'>\r\n            {props.children}\r\n        </div>\r\n        );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\n//import { robots } from './robots';\r\nimport Scroll from './Scroll';\r\nimport {setSearchField, requestRobots} from './actions.js';\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        searchfield: state.searchRobots.searchfield,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    // constructor() {\r\n    //     super()\r\n    //     this.state = {\r\n    //         robots: [],\r\n    //         //searchfield: ''\r\n    //     }\r\n    //     console.log('constructor');\r\n    // }\r\n\r\n    componentDidMount() { //after all the elements of the page is rendered correctly, this method is called. After the markup is set on the page, \r\n                         //this technique called by React itself to either fetch the data from An External API or perform some unique operations which need the JSX elements.\r\n        //console.log(this.props.store.getState());\r\n        // fetch('https://jsonplaceholder.typicode.com/users')\r\n        // .then(response=>\r\n        // {\r\n        //    return response.json();\r\n        // })\r\n        // .then(users => {\r\n        //     this.setState({ robots: users })\r\n        // });\r\n        // // this.setState({robots: robots});\r\n        // console.log('componontDidMount');\r\n\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    // onSearchChange = (event) => {\r\n    //     this.setState({ searchfield: event.target.value })\r\n    //     //console.log(event.target.value);\r\n    //     //console.log(filteredRobots);\r\n    // }\r\n\r\n    render() {\r\n        //console.log('render');\r\n        //const {robots} = this.state;\r\n        const {searchfield, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n        })\r\n        if (isPending) {\r\n            return <h1></h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                <h1>Robots</h1>\r\n                <SearchBox searchChange = {onSearchChange}/>\r\n                <Scroll>\r\n                <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    } \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n//higher order function","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => { //higer order function: function that returns a function\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>\r\n    {\r\n       return response.json()\r\n       .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n       .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n    })\r\n}\r\n//intakes text, returns object w/ type changesearchfield and sends the input as payload\r\n//action -> middleware -> constants -> reducers -> store (object) -> react changes","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from \"./constants.js\"\r\n\r\nconst initialStateSearch = {\r\n    searchfield: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchfield: action.payload});\r\n            //return new state\r\n        default: return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default: \r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider, connect} from 'react-redux'; //Redux\nimport {createStore, applyMiddleware, combineReducers} from 'redux'; //Store\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './App';\n//import Card from './Card';\n//import CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers';\nimport 'tachyons';\n//import { robots } from './robots';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); //create store\n\nReactDOM.render(\n<Provider  store={store}><App/></Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}